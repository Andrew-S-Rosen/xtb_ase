var __index = {"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"xtb_ase","text":"<p>Welcome to the documentation for <code>xtb_ase</code>!</p>"},{"location":"index.html#motivation","title":"Motivation","text":"<p>The <code>xtb</code> package is an excellent program that provides unified access to various extended tight-binding quantum chemistry methods.</p> <p>There are several pre-existing Pythonic interfaces to the xTB suite of methods. The most notable include <code>tblite</code> and the now-deprecated <code>xtb-python</code>. However, these interfaces do not provide full access to all the functionality of <code>xtb</code>, making their utility somewhat limited.</p> <p>The <code>xtb_ase</code> package aims to provide a fully featured Atomic Simulation Environment (ASE) calculator for <code>xtb</code>. The <code>xtb_ase</code> package calls the <code>xtb</code> executable directly, uses cclib for the output parsing, and uses Jinja for the input file templating. This combination enables a lightweight and flexible interface to <code>xtb</code> that is fully compatible with the ASE framework.</p>"},{"location":"about/changelog.html","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog.html#001","title":"[0.0.1]","text":""},{"location":"about/changelog.html#added","title":"Added","text":"<ul> <li>The initial release!</li> </ul>"},{"location":"about/conduct.html","title":"Code of Conduct","text":""},{"location":"about/conduct.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"about/conduct.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/conduct.html#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"about/conduct.html#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"about/conduct.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"about/conduct.html#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"about/conduct.html#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"about/conduct.html#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"about/conduct.html#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"about/conduct.html#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"about/conduct.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"about/license.html","title":"License","text":"LICENSE.md<pre><code>BSD 3-Clause License\n\nCopyright (c) 2023\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"about/people.html","title":"People","text":""},{"location":"about/people.html#developers","title":"Developers","text":"<p><code>xtb_ase</code> was designed and developed by Andrew S. Rosen.</p>"},{"location":"about/people.html#contributors","title":"Contributors","text":"<p>Additional contributions were made by the individuals listed here. Their contributions are summarized below.</p> <p>Note</p> <p>Don't see your name and want to update the list? Submit a PR and update this documentation page!</p> <ul> <li>Could be you!</li> </ul>"},{"location":"dev_guide/contributing.html","title":"Contributing","text":""},{"location":"dev_guide/contributing.html#general","title":"General","text":"<p>We certainly welcome bugfixes and contributions as pull requests (PRs). All PRs must come with associated unit tests and pass the test suite in order to be merged.</p>"},{"location":"dev_guide/contributing.html#dependencies","title":"Dependencies","text":"<p>To install the dependencies for the test suite, install the <code>[dev]</code> extras:</p> <pre><code>pip install -e .[dev]\n</code></pre> <p>To install the dependencies for the documentation, install the <code>[docs]</code> extras:</p> <pre><code>pip install -e .[docs]\n</code></pre>"},{"location":"dev_guide/contributing.html#running-the-tests","title":"Running the Tests","text":"<p>To run the test suite, use the following command in the base directory or <code>tests</code> directory:</p> <pre><code>pytest .\n</code></pre>"},{"location":"dev_guide/contributing.html#formatting","title":"Formatting","text":"<p>All code for <code>xtb_ase</code> is formatted using <code>black</code>, <code>isort</code>, and <code>ruff</code> (although this will be fixed automatically after your PR is merged).</p>"},{"location":"dev_guide/contributing.html#building-the-docs","title":"Building the Docs","text":"<p>To build the documentation, run the following in the base directory:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"install_guide/install.html","title":"Installation Guide","text":""},{"location":"install_guide/install.html#installing-xtb","title":"Installing xTB","text":"<p>First, you'll need to install the xTB package. The easiest way to do this is via Conda:</p> <pre><code>conda install -c conda-forge xtb\n</code></pre>"},{"location":"install_guide/install.html#installing-xtb_ase","title":"Installing <code>xtb_ase</code>","text":"<pre><code>pip install git+https://github.com/Quantum-Accelerators/xtb_ase.git\n</code></pre>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>xtb_ase<ul> <li>_io</li> <li>calculator</li> </ul> </li> </ul>"},{"location":"reference/xtb_ase/_io.html","title":"_io","text":"<p>I/O for xTB</p>"},{"location":"reference/xtb_ase/_io.html#xtb_ase._io.read_xtb_results","title":"read_xtb_results","text":"<pre><code>read_xtb_results(output_file, grad_file, xtb_opt_file)\n</code></pre> <p>Read the output files from xTB.</p> <p>Parameters:</p> <ul> <li> <code>output_file</code>               (<code>Path | str</code>)           \u2013            <p>The path to the xTB output file.</p> </li> <li> <code>grad_file</code>               (<code>Path | str | None</code>)           \u2013            <p>The path to the xTB gradient file.</p> </li> <li> <code>xtb_opt_file</code>               (<code>Path | str | None</code>)           \u2013            <p>The path to the xTB .opt file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Results</code>           \u2013            <p>The calculator results.</p> </li> </ul> Source code in <code>xtb_ase/_io.py</code> <pre><code>def read_xtb_results(\n    output_file: Path | str,\n    grad_file: Path | str | None,\n    xtb_opt_file: Path | str | None,\n) -&gt; Results:\n    \"\"\"\n    Read the output files from xTB.\n\n    Parameters\n    ----------\n    output_file\n        The path to the xTB output file.\n    grad_file\n        The path to the xTB gradient file.\n    xtb_opt_file\n        The path to the xTB .opt file.\n\n    Returns\n    -------\n    Results\n        The calculator results.\n    \"\"\"\n\n    filepaths = [output_file]\n    if grad_file.exists():\n        filepaths.append(grad_file)\n\n    cclib_obj = ccread(filepaths, logging.ERROR)\n    energy = cclib_obj.scfenergies[-1]\n\n    results = {\n        \"energy\": energy,\n        \"attributes\": jsanitize(cclib_obj.getattributes()),\n    }\n    if hasattr(cclib_obj, \"grads\"):\n        forces = -cclib_obj.grads[-1, :, :] * Hartree / Bohr\n        results[\"forces\"] = forces\n\n    xtb_opt_file = Path(xtb_opt_file)\n    if xtb_opt_file.is_file():\n        final_atoms = read(xtb_opt_file)\n        results[\"final_atoms\"] = final_atoms\n\n    if forces is not None:\n        results[\"forces\"] = forces\n\n    return dict(sorted(results.items()))\n</code></pre>"},{"location":"reference/xtb_ase/_io.html#xtb_ase._io.write_xtb_inputs","title":"write_xtb_inputs","text":"<pre><code>write_xtb_inputs(atoms, input_filepath, geom_filepath, parameters)\n</code></pre> <p>Write out the input files for xTB.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>Atoms</code>)           \u2013            <p>The ASE atoms object.</p> </li> <li> <code>input_filepath</code>               (<code>Path | str</code>)           \u2013            <p>The path to the xTB input file.</p> </li> <li> <code>geom_filepath</code>               (<code>Path | str</code>)           \u2013            <p>The path to the xTB geometry file.</p> </li> <li> <code>parameters</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The xTB parameters to use, formatted as a dictionary.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>xtb_ase/_io.py</code> <pre><code>def write_xtb_inputs(\n    atoms: Atoms,\n    input_filepath: Path | str,\n    geom_filepath: Path | str,\n    parameters: dict[str, Any],\n) -&gt; None:\n    \"\"\"\n    Write out the input files for xTB.\n\n    Parameters\n    ----------\n    atoms\n        The ASE atoms object.\n    input_filepath\n        The path to the xTB input file.\n    geom_filepath\n        The path to the xTB geometry file.\n    parameters\n        The xTB parameters to use, formatted as a dictionary.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    template_str = r\"\"\"\n{% for key, value in parameters.items() %}\n${{ key }}\n{% for inner_key, inner_value in value.items() %}\n    {% if inner_value is iterable and inner_value is not string %}\n    {{ inner_key }}: {{ inner_value }}\n    {% else %}\n    {{ inner_key }}={{ inner_value }}\n    {% endif %}\n{% endfor %}\n$end\n\n{% endfor %}\n\"\"\"\n\n    # Write the input file using the Jinja2 template\n    input_text = Template(template_str).render(parameters=parameters)\n    with open(input_filepath, \"w\") as fd:\n        fd.write(input_text)\n\n    # Write the geometry file\n    write(geom_filepath, atoms)\n</code></pre>"},{"location":"reference/xtb_ase/calculator.html","title":"calculator","text":"<p>ASE calculator for xtb_ase</p>"},{"location":"reference/xtb_ase/calculator.html#xtb_ase.calculator.XTB","title":"XTB","text":"<pre><code>XTB(profile=None, directory='.', method='gfn2-xtb', charge=0, uhf=0, spinpol=None, **kwargs)\n</code></pre> <p>               Bases: <code>GenericFileIOCalculator</code></p> <p>xTB calculator</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>XTBProfile | None</code>, default:                   <code>None</code> )           \u2013            <p>An instantiated xtb_ase.calculator.XTBProfile object to use.</p> </li> <li> <code>directory</code>               (<code>Path | str</code>, default:                   <code>'.'</code> )           \u2013            <p>The path to the directory to run the xTB calculation in.</p> </li> <li> <code>method</code>               (<code>Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff']</code>, default:                   <code>'gfn2-xtb'</code> )           \u2013            <p>The xTB method to use. Case-insensitive.</p> </li> <li> <code>charge</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The net charge of the system.</p> </li> <li> <code>uhf</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of unpaired electrons in the system.</p> </li> <li> <code>spinpol</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to use spin-polarized xTB. If None, <code>spinpol</code> will be automatically set to True if <code>uhf</code> &gt; 0.</p> </li> <li> <code>**kwargs</code>           \u2013            <p>Any additional xTB parameters to be written out to a detailed input file, e.g. in the format of <code>scc={\"temp\": 500}</code>. See https://github.com/grimme-lab/xtb/blob/main/man/xcontrol.7.adoc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>xtb_ase/calculator.py</code> <pre><code>def __init__(\n    self,\n    profile: XTBProfile | None = None,\n    directory: Path | str = \".\",\n    method: Literal[\"gfn0-xtb\", \"gfn1-xtb\", \"gfn2-xTB\", \"gfn-ff\"] = \"gfn2-xtb\",\n    charge: int = 0,\n    uhf: int = 0,\n    spinpol: bool | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Initialize the xTB calculator.\n\n    Parameters\n    ----------\n    profile\n        An instantiated [xtb_ase.calculator.XTBProfile][] object to use.\n    directory\n        The path to the directory to run the xTB calculation in.\n    method\n        The xTB method to use. Case-insensitive.\n    charge\n        The net charge of the system.\n    uhf\n        The number of unpaired electrons in the system.\n    spinpol\n        Whether to use spin-polarized xTB. If None, `spinpol` will be automatically\n        set to True if `uhf` &gt; 0.\n    **kwargs\n        Any additional xTB parameters to be written out to a detailed input file, e.g. in the format\n        of `scc={\"temp\": 500}`. See https://github.com/grimme-lab/xtb/blob/main/man/xcontrol.7.adoc.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    profile = profile or XTBProfile()\n\n    profile.argv.extend([\"--chrg\", f\"{charge}\"])\n    profile.argv.extend([\"--uhf\", f\"{uhf}\"])\n\n    if spinpol is None and uhf &gt; 0:\n        profile.argv.append(\"--spinpol\")\n        if \"--tblite\" not in profile.argv:\n            profile.argv.append(\"--tblite\")\n\n    if method.lower() in [\"gfn0-xtb\", \"gfn1-xtb\", \"gfn2-xtb\"]:\n        profile.argv.extend([\"--gfn\", int(method[3])])\n    elif method.lower() == \"gfn-ff\":\n        profile.argv.extend([\"--gfnff\"])\n    else:\n        raise ValueError(f\"Unsupported method {method}\")\n\n    if \"--grad\" not in profile.argv:\n        profile.argv.append(\"--grad\")\n\n    super().__init__(\n        template=_XTBTemplate(),\n        profile=profile,\n        directory=directory,\n        parameters=kwargs,\n    )\n</code></pre>"},{"location":"reference/xtb_ase/calculator.html#xtb_ase.calculator.XTBProfile","title":"XTBProfile","text":"<pre><code>XTBProfile(argv=None)\n</code></pre> <p>xTB profile</p> <p>Parameters:</p> <ul> <li> <code>argv</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The command line arguments to the xTB executable, e.g. <code>[\"xtb\", \"--tblite\"]</code>. Do not specify an input file, i.e. --input (-I), or the geometry file, as these will be automatically added.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>xtb_ase/calculator.py</code> <pre><code>def __init__(self, argv: list[str] | None = None) -&gt; None:\n    \"\"\"\n    Initialize the xTB profile.\n\n    Parameters\n    ----------\n    argv\n        The command line arguments to the xTB executable, e.g. `[\"xtb\", \"--tblite\"]`.\n        Do not specify an input file, i.e. --input (-I), or the geometry file,\n        as these will be automatically added.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    default_argv = [\"xtb\"]\n    self.argv = argv or default_argv\n</code></pre>"},{"location":"reference/xtb_ase/calculator.html#xtb_ase.calculator.XTBProfile.run","title":"run","text":"<pre><code>run(directory, input_filename, geom_filename, output_filename)\n</code></pre> <p>Run the xTB calculation.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path | str</code>)           \u2013            <p>The directory where the calculation will be run.</p> </li> <li> <code>input_filename</code>               (<code>str</code>)           \u2013            <p>The name of the input file present in the directory.</p> </li> <li> <code>geom_filename</code>               (<code>str</code>)           \u2013            <p>The name of the coordinates file present in the directory.</p> </li> <li> <code>output_filename</code>               (<code>str</code>)           \u2013            <p>The name of the log file to write to in the directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>xtb_ase/calculator.py</code> <pre><code>def run(\n    self,\n    directory: Path | str,\n    input_filename: str,\n    geom_filename: str,\n    output_filename: str,\n) -&gt; None:\n    \"\"\"\n    Run the xTB calculation.\n\n    Parameters\n    ----------\n    directory\n        The directory where the calculation will be run.\n    input_filename\n        The name of the input file present in the directory.\n    geom_filename\n        The name of the coordinates file present in the directory.\n    output_filename\n        The name of the log file to write to in the directory.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    cmd = self.argv + [\"--input\", input_filename, geom_filename, \"--json\"]\n    cmd = [str(arg) for arg in cmd]\n    with open(output_filename, \"w\") as fd:\n        check_call(cmd, stdout=fd, cwd=directory)\n</code></pre>"},{"location":"user_guide/basics.html","title":"Basic Usage","text":""},{"location":"user_guide/basics.html#overview","title":"Overview","text":"<p>The <code>xtb_ase</code> package behaves very similarly to other ASE calculators. We demonstrate some basic examples here.</p>"},{"location":"user_guide/basics.html#minimal-example","title":"Minimal Example","text":"<p>Let's start with a single-point energy calculation of water:</p> <pre><code>from ase.build import molecule\n\nfrom xtb_ase import XTB\n\natoms = molecule(\"H2O\")\natoms.calc = XTB()\n\natoms.get_potential_energy()\n\nprint(atoms.calc.results)\n</code></pre> Example Output <p>The output of the print statement is shown below:</p> <pre><code>{'energy': -137.9677709332199,\n'attributes': {'atomcharges': {'mulliken': [-0.561, 0.281, 0.281]},\n'atomcoords': [[]],\n'atomnos': [8, 1, 1],\n'charge': 0,\n'coreelectrons': [0, 0, 0],\n'grads': [[[2.6396675027566e-17, -1.5804343070521e-16, 0.014575739757803],\n    [-3.1317598233266e-17, 0.0029851379960905, -0.0072878698789013],\n    [4.9209232057001e-18, -0.0029851379960903, -0.0072878698789012]]],\n'homos': [0, 1, 2, 3],\n'metadata': {'package': 'xTB',\n'methods': ['GFN2-xTB'],\n'success': True,\n'package_version': '6.6.1',\n'keywords': ['xtb',\n    '--chrg',\n    '0',\n    '--uhf',\n    '0',\n    '--gfn',\n    '2',\n    '--grad',\n    '--input',\n    'xtb.inp',\n    'coord.xyz'],\n'coord_type': 'xyz',\n'wall_time': ['0:00:00.748000'],\n'cpu_time': ['0:00:12.070000']},\n'moenergies': [[-18.5113, -15.3777, -14.0152, -12.1663, 2.0111, 6.0623]],\n'mult': 1,\n'natom': 3,\n'scfenergies': [-137.9677709332199]},\n'forces': array([[ 1.35737159e-15, -8.12691990e-15,  7.49514668e-01],\n        [-1.61041564e-15,  1.53501966e-01, -3.74757334e-01],\n        [ 2.53044043e-16, -1.53501966e-01, -3.74757334e-01]])}\n</code></pre>"},{"location":"user_guide/basics.html#the-calculator-results","title":"The Calculator Results","text":"<p>First and foremost, the logfile will automatically be written out as <code>xtb.out</code>, which can be investigated as you see fit.</p> <p>The <code>results</code> attribute of the calculator is a dictionary that contains all the parsed information from an <code>xtb</code> run. It contains the following keys:</p> <ul> <li><code>energy</code>: The total energy of the system in units of eV. This can be accessed directly via <code>atoms.get_potential_energy()</code>.</li> <li><code>forces</code>: The forces on the atoms in units of eV/\u00c5. This can be accessed directly via <code>atoms.get_forces()</code>.</li> <li><code>final_atoms</code>: The final <code>Atoms</code> object after an internal relaxation, if relevant.</li> <li><code>attributes</code>: A dictionary containing all the parsed cclib attributes. The units are those specified by cclib.</li> </ul>"},{"location":"user_guide/basics.html#a-relaxation","title":"A Relaxation","text":""},{"location":"user_guide/basics.html#using-ase-as-the-optimizer","title":"Using ASE as the Optimizer","text":"<pre><code>from ase.build import molecule\nfrom ase.optimize import BFGS\n\nfrom xtb_ase import XTB\n\natoms = molecule(\"H2O\")\natoms.calc = XTB()\ndyn = BFGS(atoms)\n\ndyn.run(fmax=0.01)\n\nprint(atoms.calc.results)\n</code></pre>"},{"location":"user_guide/basics.html#using-xtb-as-the-optimizer","title":"Using xTB as the Optimizer","text":"<pre><code>from ase.build import molecule\n\nfrom xtb_ase import XTB, XTBProfile\n\natoms = molecule(\"H2O\")\nprofile = XTBProfile([\"xtb\", \"--opt\"])\natoms.calc = XTB(profile=profile)\n\natoms.get_potential_energy()\n\nprint(atoms.calc.results)\n</code></pre> <p>On the Mutability of <code>Atoms</code></p> <p>In contrast with the use of an ASE optimizer, the input <code>Atoms</code> object is not updated in-place when calling <code>.get_potential_energy()</code>. Instead, this information is stored in <code>atoms.calc.results[\"final_atoms\"]</code>.</p>"},{"location":"user_guide/parameters.html","title":"Setting xTB Parameters","text":""},{"location":"user_guide/parameters.html#simple-input","title":"Simple Input","text":"<p>The <code>xtb_ase</code> calculator lets you set any of the typical command-line arguments for <code>xtb</code>.</p> <p>The <code>xtb_ase</code> calculator uses a \"profile\" system to set how the <code>xtb</code> executable is called. By default, the <code>xtb_ase</code> calculator will run via <code>xtb --parallel &lt;NCPUS&gt;</code> where <code>&lt;NCPUS&gt;</code> is the number of accessible CPUs.</p> <p>If you want to change the default command-line arguments, you can do so by instantiating a new profile. For example, to run the <code>xtb</code> executable as <code>xtb --tblite</code>:</p> <pre><code>from ase.build import molecule\nfrom xtb_ase import XTB, XTBProfile\n\natoms = molecule(\"H2O\")\n\nprofile = XTBProfile([\"xtb\", \"--tblite\"])\natoms.calc = XTB(profile=profile)\n\natoms.get_potential_energy()\nprint(atoms.calc.results)\n</code></pre> <p>Note</p> <p>You should never specify the <code>--input</code> (<code>-I</code>) or coordinate file command-line arguments. The <code>xtb_ase</code> calculator will take care of those automatically.</p>"},{"location":"user_guide/parameters.html#detailed-input","title":"Detailed Input","text":"<p>For more complex inputs, xTB supports a detailed input format called <code>xcontrol</code>. This is also supported by the <code>xtb_ase</code> calculator, but instead of passing the arguments as an adjustment to the executable call in the <code>XTBProfile</code>, we modify the parameters of the <code>XTB</code> calculator instance. If desired, both an <code>XTBProfile</code> and <code>XTB</code> parameters can be supplied.</p> <pre><code>from ase.build import molecule\nfrom xtb_ase import XTB, XTBProfile\n\natoms = molecule(\"H2O\")\n\nprofile = XTBProfile([\"xtb\", \"--opt\"])\natoms.calc = XTB(profile=profile, scc={\"temp\": 500})\n\natoms.get_potential_energy()\nprint(atoms.calc.results)\n</code></pre> <p>An <code>xcontrol</code> file will be automatically written out to the runtime directory as <code>xtb.inp</code>.</p> <p>Warning</p> <p>The <code>xtb</code> code automatically ignores invalid parameters in the <code>xcontrol</code> file. When setting up a new calculation, it is recommended to check the <code>xtb.inp</code> and <code>xtb.out</code> files to ensure that the parameters were set correctly.</p>"},{"location":"user_guide/parameters.html#memory-and-parallelization","title":"Memory and Parallelization","text":"<p>The typical <code>xtb</code> suggestions apply when dealing with memory and parallelization, and <code>xtb_ase</code> lets the user make these decisions for themselves.</p> <p>For instance, most users will benefit from unlimiting the system stack:</p> <pre><code>ulimit -s unlimited\n</code></pre> <p>Additionally, one can speed up calculations by specifiying the <code>OMP_NUM_THREADS</code>, <code>OMP_MAX_ACTIVE_LEVELS</code>, and/or <code>MKL_NUM_THREADS</code> environment variables as described in the xTB manual.</p>"}]}